{"version":3,"sources":["webpack:///webpack/bootstrap 7aa0b01941be6cfe3643","webpack:///./lib/index.js","webpack:///./lib/provider.js","webpack:///./lib/posts.service.js","webpack:///./lib/parent.service.js","webpack:///./lib/pages.service.js"],"names":[],"mappings":"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","file":"wp-api-angularjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7aa0b01941be6cfe3643\n **/","import Provider from './provider.js';\nimport Posts from './posts.service.js';\nimport Pages from './pages.service.js';\n\nlet mod = angular.module('wp-api-angularjs', []);\n\nmod.provider('WpApi', Provider);\nmod.service('$wpApiPosts', Posts);\nmod.service('$wpApiPages', Pages);\n\nexport default mod = mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/index.js\n **/","/**\n * @ngdoc service\n * @name wp-api-angularjs.WpApi\n * @description\n * wp-api-angularjs provider\n */\nexport default function() {\n    'ngInject';\n    let baseUrl;\n    const namespace = '/wp/v2';\n\n    return {\n        $get,\n        setBaseUrl\n    };\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.WpApi#setBaseUrl\n     * @access public\n     * @methodOf wp-api-angularjs.WpApi\n     *\n     * @description\n     * Set the webserver base url\n     * @param {string} newBaseUrl   the url to the webservice\n     */\n    function setBaseUrl(newBaseUrl) {\n        newBaseUrl = stripTrailingSlash(newBaseUrl);\n        baseUrl = newBaseUrl + namespace;\n    }\n\n    function $get() {\n        return {\n            getBaseUrl\n        };\n\n        function getBaseUrl() {\n            return baseUrl;\n        }\n    }\n\n    function stripTrailingSlash(str) {\n        return str.replace(/\\/$/, \"\");\n    }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/provider.js\n **/","/**\n * @ngdoc service\n * @name wp-api-angularjs.$wpApiPosts\n * @description\n * Posts entity\n * @requires  wp-api-angularjs.WpApi\n * @requires  $http\n */\nimport Parent from './parent.service.js';\n\nexport default class extends Parent {\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get post list\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @example\n     * $wpApiPosts.getList({\n     *  page: 1,\n     *  per_page: 10,\n     *  \"filter[orderby]\": \"date\"\n     *  \"filter[orderby]\": \"asc\"\n     * });\n     * @returns {Object} Promise\n     */\n    getList(params, data, headers) {\n        return super.getList(`/posts`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#get\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get a specific post by its ID\n     *\n     * @param {int} postId  The post id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    get(postId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:get', {\n            postId\n        });\n        return super.get(`/posts/${postId}`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getMetaList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * [REQUIRES AUTH] Get a specific post metas\n     *\n     * @param {int} postId  The post id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getMetaList(postId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getMetaList', {\n            postId\n        });\n        return super.getList(`/posts/${postId}/meta`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getMeta\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * [REQUIRES AUTH] Get a specific post meta by its ID\n     *\n     * @param {int} postId  The post id\n     * @param {int} metaId  The meta id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getMeta(postId, metaId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getMeta', {\n            postId,\n            metaId\n        });\n        return super.get(`/posts/${postId}/meta/${metaId}`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getRevisionList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * [REQUIRES AUTH] Get a specific post revisions\n     *\n     * @param {int} postId  The post id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getRevisionList(postId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getRevisionList', {\n            postId\n        });\n        return super.getList(`/posts/${postId}/revisions`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getRevision\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * [REQUIRES AUTH] Get a specific post revision its ID\n     *\n     * @param {int} postId  The post id\n     * @param {int} getRevision  The revision id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getRevision(postId, revisionId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getRevision', {\n            postId,\n            revisionId\n        });\n        return super.get(`/posts/${postId}/revisions/${revisionId}`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getCategoryList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get a specific post category list\n     *\n     * @param {int} postId  The post id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getCategoryList(postId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getCategoryList', {\n            postId\n        });\n        return super.getList(`/posts/${postId}/terms/category`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getCategory\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get a specific post category its ID\n     *\n     * @param {int} postId  The post id\n     * @param {int} categoryId  The category id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getCategory(postId, categoryId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getCategory', {\n            postId,\n            categoryId\n        });\n        return super.get(`/posts/${postId}/terms/category/${categoryId}`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getTagList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get a specific post tag list\n     *\n     * @param {int} postId  The post id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getTagList(postId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getTagList', {\n            postId\n        });\n        return super.getList(`/posts/${postId}/terms/tag`, params, data, headers);\n    }\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPosts#getTag\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPosts\n     *\n     * @description\n     * Get a specific post tag its ID\n\n     * @param {int} postId  The post id\n     * @param {int} tagId  The tag id\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers\n     * @returns {Object} Promise\n     */\n    getTag(postId, tagId, params, data, headers) {\n        super.requiredInput('$wpApiPosts:getTag', {\n            postId,\n            tagId\n        });\n        return super.get(`/posts/${postId}/terms/tag/${tagId}`, params, data, headers);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/posts.service.js\n **/","export default class {\n    constructor(WpApi, $http) {\n        'ngInject';\n\n        this.baseUrl = WpApi.getBaseUrl();\n        this.$http = $http;\n    }\n\n    getList(suffix, params = {}, data = {}, headers = {}) {\n        return this.$http.get(this.baseUrl + suffix, {\n            params,\n            data,\n            headers\n        });\n    }\n\n    get(suffix, params = {}, data = {}, headers = {}) {\n        return this.$http.get(this.baseUrl + suffix, {\n            params,\n            data,\n            headers\n        });\n    }\n\n    requiredInput(functionName, inputs) {\n        angular.forEach(inputs, (value, name) => {\n            if (typeof value !== 'undefined') return;\n            throw new Error(`Parameter ${name} from function ${functionName} is required`);\n        });\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/parent.service.js\n **/","/**\n * @ngdoc service\n * @name wp-api-angularjs.$wpApiPages\n * @description\n * Posts entity\n * @requires  wp-api-angularjs:WpApi\n * @requires  $http\n */\nimport Parent from './parent.service.js';\n\nexport default class extends Parent {\n\n    /**\n     * @ngdoc function\n     * @name wp-api-angularjs.$wpApiPages#getList\n     * @access public\n     * @methodOf wp-api-angularjs.$wpApiPages\n     *\n     * @description\n     * Get post list\n     * @param {object} params  Optional: {Object.<string|Object>} – Map of strings or objects which will be serialized with the paramSerializer and appended as GET parameters.\n     * @param {object} data  Optional: {string|Object} – Data to be sent as the request message data.\n     * @param {object} headers  Optional: {Object} – Map of strings or functions which return strings representing HTTP headers to send to the server. If the return value of a function is null, the header will not be sent. Functions accept a config object as an argument.\n     * @example\n     * $wpApiPages.getList({\n     *  page: 1,\n     *  per_page: 10,\n     *  \"filter[orderby]\": \"date\"\n     *  \"filter[orderby]\": \"asc\"\n     * });\n     * @returns {Object} Promise\n     */\n    getList(params = {}, data = {}, headers = {}) {\n        return super.getList('/pages', params, data, headers);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/pages.service.js\n **/"],"sourceRoot":""}